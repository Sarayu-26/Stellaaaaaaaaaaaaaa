---
title: "Wild Git Collaboration Practice"
format: 
  html:
    code-fold: show
execute: 
  warning: false
  message: false
---


## STEP 5: No merge conflicts!

```{r partner 1}
### In this code chunk, start with the diamonds dataset (built in to
### ggplot2 package) and create a plot of price vs. carat (or some other
### variables of your choice)
library(ggplot2)
data("diamonds")

ggplot(data=diamonds, aes(x=price, y=carat))+
         geom_point()+
         labs(title =" Price vs Carat", x = "Price of Diamond", y=" Carat")+
         theme_minimal()
       


```

```{r partner 2}
### In this code chunk, start with the diamonds dataset (built in to
### ggplot2 package) and create a subset based on filtering, e.g., 
### size greater than 1 carat or cut is "Ideal"

library(ggplot2)

# Filter the diamonds dataset where carat equals 1
diamonds_new <- diamonds |> 
  filter(carat >= 1)


```

## STEP 7: Uh oh, merge conflicts!

```{r break-it-1}

sarayu_model<-lm(carat~depth+table+price, data=diamonds)
summary(sarayu_model)

```

## STEP 11: And even more merge conflicts!

```{r break-it-2}
#sarayu code

library(ggplot2)


ggplot(data = diamonds, aes(x = cut, fill = cut)) + 
  geom_bar() +  
  scale_fill_manual(values = c("Fair" = "#FF6347",  # Tomato
                               "Good" = "#4682B4",  # SteelBlue
                               "Very Good" = "#32CD32",  # LimeGreen
                               "Premium" = "#FFD700",  # Gold
                               "Ideal" = "#8A2BE2")) +  # BlueViolet
  labs(title = "Distribution of Diamond CutsðŸ’ŽðŸ’Ž", 
       x = "Cut Quality", 
       y = "Count") + 
  theme_minimal(base_size = 14) +  
  theme(legend.position = "none",  
        plot.title = element_text(face = "bold", hjust = 0.5))




```
```{r}



```

